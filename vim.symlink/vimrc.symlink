aug AutoloadVimrc
  au!
  au BufWritePost ~/code/dotfiles/vim.symlink/vimrc.symlink source $MYVIMRC
  au BufWritePost ~/code/dotfiles/vim.symlink/*.vim source $MYVIMRC
aug END


set nocompatible               " be iMproved
filetype off                   " required!

source $HOME/.vim/plug.vim

let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1

let mapleader = ','
syntax enable

colorscheme tender
set t_Co=256
set background=dark

" Make GUI colors light on dark
hi Normal guibg=black guifg=white
set scrolloff=21
set autoindent          " Copy indent from current line for new line
set nosmartindent       " 'smartindent' breaks right-shifting of # lines

set history=10000       " Remember this many commands

set relativenumber      " Display line numbers
set number              " Display the current line number
set numberwidth=4       " Minimum number of columns to show for line numbers
set ruler               " Always show the cursor position
set showmode            " Always show the mode
set showcmd             " Display incomplete commands
set incsearch           " Do incremental searching (as you type)
set hlsearch            " Highlight the latest search pattern
set laststatus=2        " Always show a status line

set splitright          " Split new vertical windows right of current window

set winminheight=0      " Allow windows to shrink to status line.
set winminwidth=0       " Allow windows to shrink to vertical separator.

set lbr                 " Wrap line on word boundaries
set wrap

set expandtab           " Insert spaces for <Tab> press; use spaces to indent.
set smarttab            " Tab respects 'shiftwidth', 'tabstop', 'softtabstop'.
set tabstop=2           " Set the visible width of tabs.
set softtabstop=2       " Edit as if tabs are 4 characters wide.
set shiftwidth=2        " Number of spaces to use for indent and unindent.
set shiftround          " Round indent to a multiple of 'shiftwidth'.

set wildmode=list:longest,full
set wildmenu

set virtualedit=block

" Care about case only if I use an uppercase letter
set ignorecase
set smartcase

" Make buffers less annoying, i.e.,
" keep changed buffers without requiring saves
" set hidden

" Act more 'normal' about backpacking
" e.g. to backspace past start of edit
set backspace=indent,eol,start

" Make the keyboard and mouse act more like Windows
set selection=exclusive
set selectmode=mouse,key
set mousemodel=popup
set keymodel=startsel,stopsel

set whichwrap+=<,>,[,]

set listchars=tab:>-,trail:Â·
set list

set noswapfile

" Command-T configuration
let g:CommandTMaxHeight=20

" Enable syntastic syntax checking
"let g:syntastic_enable_signs=1
"let g:syntastic_quiet_messages = {'level': 'warnings'}
set statusline=%f
set statusline+=%{fugitive#statusline()}
"let g:syntastic_always_populate_loc_list = 1
"let g:syntastic_auto_loc_list = 1
"let g:syntastic_check_on_open = 1
"let g:syntastic_check_on_wq = 0
"let g:syntastic_javascript_checkers = ['eslint']

let g:neomake_verbose=3
"let g:neomake_logfile="neomake.log"
let g:neomake_list_height=10
autocmd! BufWritePost * Neomake
let g:neomake_javascript_enabled_makers = ['eslint']
"let g:neomake_open_list = 1
"let g:neomake_javascript_eslint_maker = {
    "\ 'args': ['--no-color', '--format', 'compact'],
    "\ 'errorformat': '%f: line %l\, col %c\, %m'
    "\ }

let g:neomake_place_signs=3
let g:neomake_info_sign={'text': 'ðŸ’­ '}
let g:neomake_warning_sign={'text': 'ðŸ’© '}
let g:neomake_error_sign={'text': 'ðŸš« '}

let g:UltiSnipsExpandTrigger="<c-j>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" for vim test
let test#strategy = "neovim"

" for delimate to expand on return for JS
let delimitMate_expand_cr = 2

" for emoji
" set completefunc=emoji#complete

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

let g:javascript_enable_domhtmlcss = 1
let g:jsx_ext_required = 0

let g:mustache_abbreviations = 1

" MacVIM shift+arrow-keys behavior (required in .vimrc)
let macvim_hig_shift_movement = 1

let g:haskell_enable_quantification = 1   " to enable highlighting of `forall`
let g:haskell_enable_recursivedo = 1      " to enable highlighting of `mdo` and `rec`
let g:haskell_enable_arrowsyntax = 1      " to enable highlighting of `proc`
let g:haskell_enable_pattern_synonyms = 1 " to enable highlighting of `pattern`
let g:haskell_enable_typeroles = 1        " to enable highlighting of type roles
let g:haskell_enable_static_pointers = 1  " to enable highlighting of `static`

let g:rainbow_active = 1

" % to bounce from do to end etc.
runtime! macros/matchit.vim

if &term =~ '^screen'
  " tmux will send xterm-style keys when its xterm-keys option is on
  execute "set <xUp>=\e[1;*A"
  execute "set <xDown>=\e[1;*B"
  execute "set <xRight>=\e[1;*C"
  execute "set <xLeft>=\e[1;*D"
endif

filetype plugin indent on

" Source other settings from files
"
" Key mappings
source $HOME/.vim/keymaps.vim
" Commands
source $HOME/.vim/commands.vim
" File types
source $HOME/.vim/filetypes.vim
" Abbreviations
source $HOME/.vim/abbreviations.vim
